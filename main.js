(()=>{"use strict";var e={d:(t,n)=>{for(var o in n)e.o(n,o)&&!e.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:n[o]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};async function t(e){fetch(`https://api.weatherapi.com/v1/current.json?key=f3ae3cf617144c85a8993813231507&q=${e}`).then((function(e){return e.json()})).then((e=>{!function(e){const{currentTemperature:t,lastUpdated:n,city:o,region:l,conditionText:p,conditionIcon:y,humidity:h,prec:s,windSpeed:f}=e,x=y.replace("64x64","128x128");i.src=`https:${x}`,c.textContent=t+"Â°C",m.textContent=h+"%",a.textContent=s+"mm",d.textContent=f+"km/h",l?r.textContent=o+", "+l+" - As of "+n:l||(r.textContent=o+" - As of "+n),u.textContent=p}({currentTemperature:e.current.temp_c,lastUpdated:e.current.last_updated,city:e.location.name,region:e.location.region,conditionText:e.current.condition.text,conditionIcon:e.current.condition.icon,humidity:e.current.humidity,prec:e.current.precip_mm,windSpeed:e.current.wind_kph})})).catch((function(e){console.log("Error fetching weather data:",e)}))}e.d({},{em:()=>u,Fo:()=>c,C2:()=>m,qe:()=>r,fY:()=>a,ed:()=>i,ZS:()=>d});const n=document.getElementById("placeName"),o=document.getElementById("submit"),c=(document.querySelector(".weather"),document.querySelector(".currentTemperature")),r=document.querySelector(".location"),i=document.querySelector("#weatherIcon"),u=document.querySelector(".condition"),d=document.querySelector(".wind"),a=document.querySelector(".precipitation"),m=document.querySelector(".humidity");let l="mumbai";t(l),o.onclick=function(e){l=n.value,t(l),e.preventDefault()}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsIm1hcHBpbmdzIjoibUJBQ0EsSUFBSUEsRUFBc0IsQ0NBMUJBLEVBQXdCLENBQUNDLEVBQVNDLEtBQ2pDLElBQUksSUFBSUMsS0FBT0QsRUFDWEYsRUFBb0JJLEVBQUVGLEVBQVlDLEtBQVNILEVBQW9CSSxFQUFFSCxFQUFTRSxJQUM1RUUsT0FBT0MsZUFBZUwsRUFBU0UsRUFBSyxDQUFFSSxZQUFZLEVBQU1DLElBQUtOLEVBQVdDLElBRTFFLEVDTkRILEVBQXdCLENBQUNTLEVBQUtDLElBQVVMLE9BQU9NLFVBQVVDLGVBQWVDLEtBQUtKLEVBQUtDLElDRTNFSSxlQUFlQyxFQUFXQyxHQUU3QkMsTUFBTSxtRkFBbUZELEtBQ3RGRSxNQUFLLFNBQVNDLEdBQ2IsT0FBT0EsRUFBU0MsTUFDcEIsSUFFQ0YsTUFBS0csS0NQSCxTQUF3QkMsR0FFM0IsTUFBTSxtQkFBRUMsRUFBa0IsWUFBRUMsRUFBVyxLQUFFQyxFQUFJLE9BQUVDLEVBQU0sY0FBRUMsRUFBYSxjQUFFQyxFQUFhLFNBQUVDLEVBQVEsS0FBRUMsRUFBSSxVQUFFQyxHQUFjVCxFQUk3R1UsRUFBVUosRUFBY0ssUUFBUSxRQURyQixXQUdqQkMsRUFBWUMsSUFBTSxTQUFTSCxJQUMzQkksRUFBc0JDLFlBQWNkLEVBQXFCLEtBQ3pEZSxFQUFZRCxZQUFjUixFQUFXLElBQ3JDVSxFQUFRRixZQUFjUCxFQUFPLEtBQzdCVSxFQUFRSCxZQUFjTixFQUFZLE9BRTlCTCxFQUNBZSxFQUFZSixZQUFjWixFQUFPLEtBQU9DLEVBQVMsWUFBY0YsRUFDdkRFLElBQ1JlLEVBQVlKLFlBQWNaLEVBQU8sWUFBY0QsR0FHbkRrQixFQUFhTCxZQUFjVixDQUMvQixDRERRZ0IsQ0Faa0IsQ0FDZHBCLG1CQUFvQkYsRUFBS3VCLFFBQVFDLE9BQ2pDckIsWUFBYUgsRUFBS3VCLFFBQVFFLGFBQzFCckIsS0FBTUosRUFBSzBCLFNBQVNDLEtBQ3BCdEIsT0FBUUwsRUFBSzBCLFNBQVNyQixPQUN0QkMsY0FBZU4sRUFBS3VCLFFBQVFLLFVBQVVDLEtBQ3RDdEIsY0FBZVAsRUFBS3VCLFFBQVFLLFVBQVVFLEtBQ3RDdEIsU0FBVVIsRUFBS3VCLFFBQVFmLFNBQ3ZCQyxLQUFNVCxFQUFLdUIsUUFBUVEsVUFDbkJyQixVQUFXVixFQUFLdUIsUUFBUVMsVUFHRCxJQUc5QkMsT0FBTSxTQUFTQyxHQUNaQyxRQUFRQyxJQUFJLCtCQUFnQ0YsRUFDaEQsR0FDSixDLHlFRTFCQSxNQUFNRyxFQUFRQyxTQUFTQyxlQUFlLGFBQ2hDLEVBQVNELFNBQVNDLGVBQWUsVUFFakN4QixHQURhdUIsU0FBU0UsY0FBYyxZQUNaRixTQUFTRSxjQUFjLHdCQUMvQ3BCLEVBQWNrQixTQUFTRSxjQUFjLGFBQ3JDM0IsRUFBY3lCLFNBQVNFLGNBQWMsZ0JBQ3JDbkIsRUFBZWlCLFNBQVNFLGNBQWMsY0FFdENyQixFQUFVbUIsU0FBU0UsY0FBYyxTQUNqQ3RCLEVBQVVvQixTQUFTRSxjQUFjLGtCQUNqQ3ZCLEVBQWNxQixTQUFTRSxjQUFjLGFBRTNDLElBQUk3QyxFQUFZLFNBR2hCRCxFQUFXQyxHQUVYLEVBQU84QyxRQUFVLFNBQVNDLEdBQ3RCL0MsRUFBWTBDLEVBQU1NLE1BQ2xCakQsRUFBV0MsR0FDWCtDLEVBQUVFLGdCQUNOLEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL3NyYy9tb2R1bGVzL3dlYXRoZXIuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9zcmMvbW9kdWxlcy9kaXNwbGF5LmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRoZSByZXF1aXJlIHNjb3BlXG52YXIgX193ZWJwYWNrX3JlcXVpcmVfXyA9IHt9O1xuXG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiaW1wb3J0IHsgZGlzcGxheVdlYXRoZXIgfSBmcm9tIFwiLi9kaXNwbGF5XCI7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRXZWF0aGVyKHBsYWNlTmFtZSkgeyBcblxuICAgIGZldGNoKGBodHRwczovL2FwaS53ZWF0aGVyYXBpLmNvbS92MS9jdXJyZW50Lmpzb24/a2V5PWYzYWUzY2Y2MTcxNDRjODVhODk5MzgxMzIzMTUwNyZxPSR7cGxhY2VOYW1lfWApXG4gICAgICAudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xuICAgIH0pXG5cbiAgICAudGhlbihkYXRhID0+IHtcbiAgICAgICAgbGV0IHdlYXRoZXJEYXRhID0ge1xuICAgICAgICAgICAgY3VycmVudFRlbXBlcmF0dXJlOiBkYXRhLmN1cnJlbnQudGVtcF9jLFxuICAgICAgICAgICAgbGFzdFVwZGF0ZWQ6IGRhdGEuY3VycmVudC5sYXN0X3VwZGF0ZWQsXG4gICAgICAgICAgICBjaXR5OiBkYXRhLmxvY2F0aW9uLm5hbWUsXG4gICAgICAgICAgICByZWdpb246IGRhdGEubG9jYXRpb24ucmVnaW9uLFxuICAgICAgICAgICAgY29uZGl0aW9uVGV4dDogZGF0YS5jdXJyZW50LmNvbmRpdGlvbi50ZXh0LFxuICAgICAgICAgICAgY29uZGl0aW9uSWNvbjogZGF0YS5jdXJyZW50LmNvbmRpdGlvbi5pY29uLFxuICAgICAgICAgICAgaHVtaWRpdHk6IGRhdGEuY3VycmVudC5odW1pZGl0eSxcbiAgICAgICAgICAgIHByZWM6IGRhdGEuY3VycmVudC5wcmVjaXBfbW0sXG4gICAgICAgICAgICB3aW5kU3BlZWQ6IGRhdGEuY3VycmVudC53aW5kX2twaFxuICAgICAgICAgIH07XG5cbiAgICAgICAgZGlzcGxheVdlYXRoZXIod2VhdGhlckRhdGEpO1xuICAgIH0pXG4gICAgXG4gICAgLmNhdGNoKGZ1bmN0aW9uKGVycikge1xuICAgICAgICBjb25zb2xlLmxvZygnRXJyb3IgZmV0Y2hpbmcgd2VhdGhlciBkYXRhOicsIGVycik7XG4gICAgfSk7XG59IiwiaW1wb3J0IHsgY3VycmVudFRlbXBlcmF0dXJlQm94LCBsb2NhdGlvbkJveCwgd2VhdGhlckljb24sIGNvbmRpdGlvbkJveCwgd2luZEJveCwgcHJlY0JveCwgaHVtaWRpdHlCb3ggfSBmcm9tIFwiLi5cIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGRpc3BsYXlXZWF0aGVyKHdlYXRoZXJEYXRhKVxue1xuICAgIGNvbnN0IHsgY3VycmVudFRlbXBlcmF0dXJlLCBsYXN0VXBkYXRlZCwgY2l0eSwgcmVnaW9uLCBjb25kaXRpb25UZXh0LCBjb25kaXRpb25JY29uLCBodW1pZGl0eSwgcHJlYywgd2luZFNwZWVkIH0gPSB3ZWF0aGVyRGF0YTtcblxuXG4gICAgY29uc3QgaWNvblNpemUgPSAnMTI4eDEyOCc7XG4gICAgY29uc3QgaWNvblVSTCA9IGNvbmRpdGlvbkljb24ucmVwbGFjZSgnNjR4NjQnLCBpY29uU2l6ZSk7XG5cbiAgICB3ZWF0aGVySWNvbi5zcmMgPSBgaHR0cHM6JHtpY29uVVJMfWA7XG4gICAgY3VycmVudFRlbXBlcmF0dXJlQm94LnRleHRDb250ZW50ID0gY3VycmVudFRlbXBlcmF0dXJlICsgXCLCsENcIjtcbiAgICBodW1pZGl0eUJveC50ZXh0Q29udGVudCA9IGh1bWlkaXR5ICsgXCIlXCI7XG4gICAgcHJlY0JveC50ZXh0Q29udGVudCA9IHByZWMgKyBcIm1tXCI7XG4gICAgd2luZEJveC50ZXh0Q29udGVudCA9IHdpbmRTcGVlZCArIFwia20vaFwiO1xuXG4gICAgaWYgKHJlZ2lvbikge1xuICAgICAgICBsb2NhdGlvbkJveC50ZXh0Q29udGVudCA9IGNpdHkgKyBcIiwgXCIgKyByZWdpb24gKyBcIiAtIEFzIG9mIFwiICsgbGFzdFVwZGF0ZWQ7XG4gICAgfSBlbHNlIGlmICghcmVnaW9uKSB7XG4gICAgICAgIGxvY2F0aW9uQm94LnRleHRDb250ZW50ID0gY2l0eSArIFwiIC0gQXMgb2YgXCIgKyBsYXN0VXBkYXRlZDtcbiAgICB9XG5cbiAgICBjb25kaXRpb25Cb3gudGV4dENvbnRlbnQgPSBjb25kaXRpb25UZXh0O1xufSIsImltcG9ydCB7IGdldFdlYXRoZXIgfSBmcm9tIFwiLi9tb2R1bGVzL3dlYXRoZXJcIjtcblxuY29uc3QgcGxhY2UgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGxhY2VOYW1lJyk7XG5jb25zdCBzdWJtaXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3VibWl0Jyk7XG5jb25zdCB3ZWF0aGVyQm94ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLndlYXRoZXInKTtcbmNvbnN0IGN1cnJlbnRUZW1wZXJhdHVyZUJveCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jdXJyZW50VGVtcGVyYXR1cmUnKTtcbmNvbnN0IGxvY2F0aW9uQm94ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmxvY2F0aW9uJyk7XG5jb25zdCB3ZWF0aGVySWNvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN3ZWF0aGVySWNvbicpO1xuY29uc3QgY29uZGl0aW9uQm94ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNvbmRpdGlvbicpO1xuXG5jb25zdCB3aW5kQm94ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLndpbmQnKTtcbmNvbnN0IHByZWNCb3ggPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJlY2lwaXRhdGlvbicpXG5jb25zdCBodW1pZGl0eUJveCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5odW1pZGl0eScpXG5cbmxldCBwbGFjZU5hbWUgPSAnbXVtYmFpJztcblxuXG5nZXRXZWF0aGVyKHBsYWNlTmFtZSk7XG5cbnN1Ym1pdC5vbmNsaWNrID0gZnVuY3Rpb24oZSkge1xuICAgIHBsYWNlTmFtZSA9IHBsYWNlLnZhbHVlO1xuICAgIGdldFdlYXRoZXIocGxhY2VOYW1lKTtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG59XG5cbmV4cG9ydCB7IHdlYXRoZXJCb3gsIGN1cnJlbnRUZW1wZXJhdHVyZUJveCwgbG9jYXRpb25Cb3gsIHdlYXRoZXJJY29uLCBjb25kaXRpb25Cb3gsIHdpbmRCb3gsIHByZWNCb3gsIGh1bWlkaXR5Qm94IH07Il0sIm5hbWVzIjpbIl9fd2VicGFja19yZXF1aXJlX18iLCJleHBvcnRzIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJvYmoiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiYXN5bmMiLCJnZXRXZWF0aGVyIiwicGxhY2VOYW1lIiwiZmV0Y2giLCJ0aGVuIiwicmVzcG9uc2UiLCJqc29uIiwiZGF0YSIsIndlYXRoZXJEYXRhIiwiY3VycmVudFRlbXBlcmF0dXJlIiwibGFzdFVwZGF0ZWQiLCJjaXR5IiwicmVnaW9uIiwiY29uZGl0aW9uVGV4dCIsImNvbmRpdGlvbkljb24iLCJodW1pZGl0eSIsInByZWMiLCJ3aW5kU3BlZWQiLCJpY29uVVJMIiwicmVwbGFjZSIsIndlYXRoZXJJY29uIiwic3JjIiwiY3VycmVudFRlbXBlcmF0dXJlQm94IiwidGV4dENvbnRlbnQiLCJodW1pZGl0eUJveCIsInByZWNCb3giLCJ3aW5kQm94IiwibG9jYXRpb25Cb3giLCJjb25kaXRpb25Cb3giLCJkaXNwbGF5V2VhdGhlciIsImN1cnJlbnQiLCJ0ZW1wX2MiLCJsYXN0X3VwZGF0ZWQiLCJsb2NhdGlvbiIsIm5hbWUiLCJjb25kaXRpb24iLCJ0ZXh0IiwiaWNvbiIsInByZWNpcF9tbSIsIndpbmRfa3BoIiwiY2F0Y2giLCJlcnIiLCJjb25zb2xlIiwibG9nIiwicGxhY2UiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwicXVlcnlTZWxlY3RvciIsIm9uY2xpY2siLCJlIiwidmFsdWUiLCJwcmV2ZW50RGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=